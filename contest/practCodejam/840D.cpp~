#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

const int N = 3e5 + 5, inf = 1e9;
vector <int> t[N << 2];
int a[N];

void merge(vector <int> &a, vector <int> &b, vector <int> &c) {
  int i = 0, j = 0;
  while (i < a.size() && j < b.size()) {
    if (a[i] < b[j])
      c.push_back(a[i++]);
    else
      c.push_back(b[j++]);
  }
  while (i < a.size())
    c.push_back(a[i++]);
  while (j < b.size())
    c.push_back(b[j++]);
  return;
}

void build(int v, int tl, int tr) {
  if (tl == tr) {
    t[v].push_back(a[tl]);
    return;
  }
  int tm = tl + tr >> 1;
  build(2 * v + 1, tl, tm);
  build(2 * v + 2, tm + 1, tr);
  merge(t[2 * v + 1], t[2 * v + 2], t[v]);
  return;
}

int query(int v, int tl, int tr, int l, int r, int val) {
  if (l > r)
    return inf;
  if (l == tl && r == tr) {
    auto it = upper_bound(t[v].begin(), t[v].end(), val);
    if (it == t[v].end())
      return inf;
    return (*it); 
  }
  int tm = tl + tr >> 1;
  return min(query(2 * v + 1, tl, tm, l, min(tm, r), val),
	     query(2 * v + 2, tm + 1, tr, max(l, tm + 1), r, val));
}

int main() {
  int n, q;
  scanf("%d%d", &n, &q);
  for (int i = 0; i < n; ++i)
    scanf("%d", a + i);
  build(0, 0, n - 1);
  for (int i = 0; i < q; ++i) {
    int l, r, k, val, ans;
    scanf("%d%d%d", &l, &r, &k);
    val = (r - l + 1) / k;
    ans = query(0, 0, n - 1, l - 1, r - 1, val);
    printf("%d\n", ans != inf ? ans : -1);
  }
  return 0;
}
