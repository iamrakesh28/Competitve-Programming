#include <iostream>
#include <set>
#include <cassert>
#include <vector>

using namespace std;

const int N = 1e5 + 5;
int A[N];
set <int> bit[31], org;
vector <int> rem;

int main() {

  int n, k, ans = 0;
  scanf("%d%d", &n, &k);
  for (int i = 0; i < n; ++i) {
    scanf("%d", A + i);
    for (int j = 0; j < 31; ++j)
      if ((1 << j) & A[i])
	bit[j].insert(A[i]);
  }
  org.insert(A[k - 1]);
  while (ans < n) {
    rem.clear();
    while (org.size()) {
      auto it = org.begin();
      rem.push_back(*it);
      org.erase(*it);
      ans++;
    }
    int add = 0;
    for (int it : rem)
      for (int j = 30; j >=0; j--)
	if ((1 << j) & it)
	  bit[j].erase(bit[j].find(it));
    for (int it : rem) {
      //cout<<it<<" : ";
      for (int j = 30; j >= 0; j--)
	if ((1 << j) & it) {
	  for (auto it1 : bit[j]) {
	    org.insert(it1);
	    //cout<<it1<<endl;
	    add = 1;
	  }
	}
	  
    }
    if (add == 0)
      break;
  }
  printf("%d\n", n - ans);
  return 0;
}
