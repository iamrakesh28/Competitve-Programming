#include <iostream>

using namespace std;

const int N = 1e3 + 5,
  INF = 1e9, TASK = 400;
int A[N], dp[N][N];

int solve_task2(int n, int x, int y) {

  int ans = INF;
  for (int i = 1; i <= n; ++i) {
    for (int j = 0; j <= n ; ++j) {
      for (int k = 0; k <= y; ++k) {
        if (j == 0) {
          dp[j][k] = (k == 0 ? 0 : INF);
          continue;
        }

        dp[j][k] = dp[i - 1][k];
        if (k >= A[j - 1]) {
          if (j > i)
            dp[j][k] = dp[j - 1][k - A[j - 1]] + 1;
          else
            dp[j][k] = dp[j - 1][k - A[j - 1]];
        }
      }
    }

    cout << i  << "::\n";
    for (int value = x; value <= y; ++value) {
      ans = min(ans, dp[n][value]);
      cout << dp[n][value] << endl;
    }
  }

  if (ans >= INF)
    ans = -1;
  
  return ans;
}

int main() {

  int t;
  scanf("%d", &t);

  while (t--) {
    int n, x, y;
    scanf("%d%d%d", &n, &x, &y);

    for (int i = 0; i < n; ++i)
      scanf("%d", A + i);

    int ans = 2;
    if (n <= TASK)
      ans = solve_task2(n, x, y);

    printf("%d\n", ans);
  }
  
  return 0;
}
