#include <iostream>

using namespace std;

const int seq[] = {
  0b1, 0b11, 0b10, 0b110, 0b111, 0b101, 0b100,
  0b1100, 0b1101, 0b1111, 0b1110, 0b1010, 0b1011, 0b1001, 0b1000
};
const int N = 205;
int tiles[N][N];

int qresult[16];


/*
  0 -> /
  1 -> \
 */

int find_pos(int bit) {
  
  int pos = 3;
  for (int i = 0; i < 3; ++i) {
    if (bit & (1 << i)) {
      pos = i;
      break;
    }
  }

  return pos;
}

void query_single(int i, int j, int pos, int cnt) {

  int r, c;

  if (pos < 2) {
    r = i, c = j + pos;
  }
  else {
    r = i + 1, c = j + pos - 2;
  }

  printf("1 %d %d\n", r + 1, c + 1);
  fflush(stdout);

  int z;
  scanf("%d", &z);
  qresult[seq[cnt]] = z;

  return;
}

void query_2x2(int i, int j) {

  int prev = 0;
  for (int cnt = 0; cnt < 16; ++cnt) {

    int bit = seq[cnt] ^ prev, pos;
    pos = find_pos(bit);

    query_single(i, j, pos, cnt);
    prev = seq[cnt];
  }

  return;
}

void solve_2x2(int r, int c, int k) {

  int config, one = 0b1;
  for (int i = 1; i < 16; ++i) {
    if (qresult[i] != k) {
      if (qresult[i] == qresult[i ^ one])
        continue;
      config = i;
      break;
    }
  }
}

int solve_main(int n, int k) {

  int qcnt = 0;
  n = n >> 1;
  n = n << 1;
  
  for (int i = 0; i < n; i += 2) {
    for (int j = 0; j < n; j += 2) {
      query_2x2(i, j);
      solve_2x2(i, j);
    }
  }

  return qcnt;
}

int main() {

  int t;
  scanf("%d", &t);

  while (t--) {
    int n, q, k;
    scanf("%d%d%d", &n, &q, &k);
  }
  
  return 0;
}
